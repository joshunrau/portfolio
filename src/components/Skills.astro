---
import skillsIcon from "@/assets/skills-filler.svg";
import Section from "@/layouts/Section.astro";

import Skill from "./Skill.astro";

import javascript from "@/assets/javascript.svg";
import linux from "@/assets/linux.svg";
import react from "@/assets/react.svg";
import python from "@/assets/python.svg";
import typescript from "@/assets/typescript.svg";
import css from "@/assets/css.svg";
import html from "@/assets/html.svg";
import mongodb from "@/assets/mongodb.svg";
import nextjs from "@/assets/nextjs.svg";
import docker from "@/assets/docker.svg";
import nestjs from "@/assets/nestjs.svg";
import nodejs from "@/assets/nodejs.svg";

import { useTranslations } from "@/i18n";

const { t } = useTranslations(Astro.url);
---

<Section class="flex items-center flex-row-reverse justify-center gap-10">
  <div class="w-full">
    <div class="@container">
      <h3 class="mb-5 text-center text-2xl font-semibold">{t('skills.title')}</h3>
      <div class="grid grid-cols-3 gap-3 @md:grid-cols-4 @2xl:grid-cols-6" id="skills-showcase">
        <Skill label="HTML" icon={html} />
        <Skill label="CSS" icon={css} />
        <Skill label="JavaScript" icon={javascript} />
        <Skill label="TypeScript" icon={typescript} />
        <Skill label="React" icon={react} />
        <Skill label="Next.js" icon={nextjs} invert="dark" />
        <Skill label="MongoDB" icon={mongodb} />
        <Skill label="Node.js" icon={nodejs} />
        <Skill label="NestJS" icon={nestjs} />
        <Skill label="Python" icon={python} />
        <Skill label="Linux" icon={linux} />
        <Skill label="Docker" icon={docker} />
      </div>
    </div>
  </div>
  <div class="hidden flex-shrink-0 sm:block sm:w-80 md:w-96 lg:w-112 2xl:w-128">
    <img alt="placeholder" height={skillsIcon.height} width={skillsIcon.width} src={skillsIcon.src} />
  </div>
</Section>
<script>
  const container = document.getElementById("skills-showcase")!;
  const skillIcons = container.querySelectorAll("div > img");
  const observer = new IntersectionObserver((entries, observer) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        observer.disconnect();
        for (let i = 0; i < skillIcons.length; i++) {
          setTimeout(() => {
            skillIcons.item(i).classList.replace("opacity-0", "opacity-100");
            skillIcons.item(i).classList.replace("scale-0", "scale-100");
          }, i * 100);
        }
      }
    });
  });
  observer.observe(container);
</script>
